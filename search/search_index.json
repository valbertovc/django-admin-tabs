{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to django-admin-tabs documentation This site contains the project documentation for the django-admin-tabs project that is a django reusable app used in the Django projects. Table of contents Tutorials How-To Guides Reference Explanation Introduction It generates a filter and display it as a set of tabs in you admin changelist page. Get started Install the django-admin-tabs in your virtual environment: $ pip install django-admin-tabs Import it in your admin.py file and add it as a tab_filter argument in any admin class. from admin_tabs import TabFilterAdmin, TabFilter, tab from django.contrib import admin # my_app/filters.py class UserTabfilter(TabFilter): @tab() def with_email(self, request, queryset): return queryset.exclude(email=\"\") # my_app/admin.py class MyModelAdmin(TabFilterAdmin, admin.ModelAdmin): tab_filter = UserTabfilter Useful links Documentation Changelog PyPi Page Repository Bug Tracker","title":"django-admin-tabs"},{"location":"#welcome-to-django-admin-tabs-documentation","text":"This site contains the project documentation for the django-admin-tabs project that is a django reusable app used in the Django projects.","title":"Welcome to django-admin-tabs documentation"},{"location":"#table-of-contents","text":"Tutorials How-To Guides Reference Explanation","title":"Table of contents"},{"location":"#introduction","text":"It generates a filter and display it as a set of tabs in you admin changelist page.","title":"Introduction"},{"location":"#get-started","text":"Install the django-admin-tabs in your virtual environment: $ pip install django-admin-tabs Import it in your admin.py file and add it as a tab_filter argument in any admin class. from admin_tabs import TabFilterAdmin, TabFilter, tab from django.contrib import admin # my_app/filters.py class UserTabfilter(TabFilter): @tab() def with_email(self, request, queryset): return queryset.exclude(email=\"\") # my_app/admin.py class MyModelAdmin(TabFilterAdmin, admin.ModelAdmin): tab_filter = UserTabfilter","title":"Get started"},{"location":"#useful-links","text":"Documentation Changelog PyPi Page Repository Bug Tracker","title":"Useful links"},{"location":"explanation/","text":"Explanation This part of the project documentation focuses on an understanding-oriented approach. You'll get a chance to read about the background of the project, as well as reasoning about how it was implemented.","title":"Explanation"},{"location":"explanation/#explanation","text":"This part of the project documentation focuses on an understanding-oriented approach. You'll get a chance to read about the background of the project, as well as reasoning about how it was implemented.","title":"Explanation"},{"location":"how-to-guides/","text":"How-to guides This part of the project documentation focuses on a problem-oriented approach. You'll tackle common tasks that you might have, with the help of the code provided in this project. Ready-to-use classes Consider the scenario below: from django.contrib.auth import get_user_model from django.contrib import admin User = get_user_model() @admin.register(User) class MyUserAdmin(admin.ModelAdmin): list_filter = (\"is_staff\", \"is_superuser\") If you want to organize better the changelist page you can add a set of tabs that applies filter and changes the list of data showed, like you do in a django's list_filter feature. Prepare your filter and admin classes Your filter classes could be placed in admin_filters.py or just filters.py module. from admin_tabs import TabFilter, tab class UserTabFilter(TabFilter): @tab() def is_staff(self, request, queryset): return queryset.filter(is_staff=True) @tab(label=\"Super-users\") def is_superuser(self, request, queryset): return queryset.filter(is_superuser=True) Now you must declare you tab filter class in you admin class from admin_tabs import TabFilterAdmin from django.contrib.auth import get_user_model from django.contrib import admin from . import filters User = get_user_model() @admin.register(User) class MyUserAdmin(TabFilterAdmin, admin.ModelAdmin): tab_filter = filters.UserTabFilter list_filter = (\"is_staff\", \"is_superuser\") Done! When you access your admin changelist page you will see the new filter on top of page.","title":"How-To Guides"},{"location":"how-to-guides/#how-to-guides","text":"This part of the project documentation focuses on a problem-oriented approach. You'll tackle common tasks that you might have, with the help of the code provided in this project.","title":"How-to guides"},{"location":"how-to-guides/#ready-to-use-classes","text":"Consider the scenario below: from django.contrib.auth import get_user_model from django.contrib import admin User = get_user_model() @admin.register(User) class MyUserAdmin(admin.ModelAdmin): list_filter = (\"is_staff\", \"is_superuser\") If you want to organize better the changelist page you can add a set of tabs that applies filter and changes the list of data showed, like you do in a django's list_filter feature.","title":"Ready-to-use classes"},{"location":"how-to-guides/#prepare-your-filter-and-admin-classes","text":"Your filter classes could be placed in admin_filters.py or just filters.py module. from admin_tabs import TabFilter, tab class UserTabFilter(TabFilter): @tab() def is_staff(self, request, queryset): return queryset.filter(is_staff=True) @tab(label=\"Super-users\") def is_superuser(self, request, queryset): return queryset.filter(is_superuser=True) Now you must declare you tab filter class in you admin class from admin_tabs import TabFilterAdmin from django.contrib.auth import get_user_model from django.contrib import admin from . import filters User = get_user_model() @admin.register(User) class MyUserAdmin(TabFilterAdmin, admin.ModelAdmin): tab_filter = filters.UserTabFilter list_filter = (\"is_staff\", \"is_superuser\") Done! When you access your admin changelist page you will see the new filter on top of page.","title":"Prepare your filter and admin classes"},{"location":"reference/","text":"Reference This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the django-admin-tabs project code.","title":"Reference"},{"location":"reference/#reference","text":"This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the django-admin-tabs project code.","title":"Reference"},{"location":"tutorials/","text":"Tutorials This part of the project documentation focuses on a learning-oriented approach. You'll learn how to get started with the code in this project.","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"This part of the project documentation focuses on a learning-oriented approach. You'll learn how to get started with the code in this project.","title":"Tutorials"}]}